
### 2) Unit tests

**`__tests__/unit/roi.test.ts`**

```ts
import { computeROI, DEFAULT_BASELINE, DEFAULT_PRICES } from '../../server/roi';

describe('ROI computation', () => {
  it('computes positive savings with better current performance', () => {
    const current = {
      kwhPerT: DEFAULT_BASELINE.kwhPerT - 20, // energy improvement
      minPerHeat: DEFAULT_BASELINE.minPerHeat - 2, // time improvement
      electrodeKgPerHeat: DEFAULT_BASELINE.electrodeKgPerHeat - 0.5 // electrode improvement
    };
    const roi = computeROI(DEFAULT_BASELINE, current, DEFAULT_PRICES);
    expect(roi.perHeat).toBeGreaterThan(0);
    expect(roi.perMonth).toBeGreaterThan(roi.perHeat);
    expect(roi.details.energyDelta).toBeCloseTo(20, 1);
  });

  it('returns zero if current is worse than baseline', () => {
    const current = {
      kwhPerT: DEFAULT_BASELINE.kwhPerT + 50,
      minPerHeat: DEFAULT_BASELINE.minPerHeat + 5,
      electrodeKgPerHeat: DEFAULT_BASELINE.electrodeKgPerHeat + 1
    };
    const roi = computeROI(DEFAULT_BASELINE, current, DEFAULT_PRICES);
    expect(roi.perHeat).toBe(0);
    expect(roi.breakdown.energySaving).toBe(0);
  });
});
```

**`__tests__/unit/insight-static.test.ts`**

```ts
import { insightFor } from '../../server/ai/insight-static';
import type { HeatTick } from '../../server/demo/heat-sim';

const baseTick: HeatTick = {
  ts: Date.now(), stage: 'MELT', tempC: 1200, kwhTotal: 10, kwhPerT: 0.50,
  pf: 0.82, tap: 9, thd: 4.5, foamIdx: 0.6, cPct: 0.012, oPct: 0.02
};

describe('Deterministic insights', () => {
  it('flags foam collapse risk', () => {
    const t = { ...baseTick, foamIdx: 0.3, thd: 5.6 };
    const ins = insightFor(t);
    expect(ins.title.toLowerCase()).toContain('foam');
    expect(ins.action.length).toBeGreaterThan(0);
  });

  it('flags energy inefficiency above baseline', () => {
    const t = { ...baseTick, kwhPerT: 0.61 };
    const ins = insightFor(t);
    expect(ins.title.toLowerCase()).toContain('energy');
  });
});
```

**`__tests__/unit/heat-sim.test.ts`**

```ts
import { HeatSim } from '../../server/demo/heat-sim';

describe('HeatSim determinism & scenarios', () => {
  it('same seed yields same sequence', () => {
    const s1 = new HeatSim(42), s2 = new HeatSim(42);
    const seq1 = Array.from({length: 10}, () => s1.tick().tempC);
    const seq2 = Array.from({length: 10}, () => s2.tick().tempC);
    expect(seq1).toEqual(seq2);
  });

  it('scenario injection & recovery', () => {
    const sim = new HeatSim(42);
    for (let i=0;i<420;i++) sim.tick(); // advance to ~7min
    sim.applyScenario({
      id: 'energy-spike', name: 'Energy Spike', injectAtSec: 0,
      delta: { pf: -0.08, thd: +1.5, foamIdx: -0.2, note: 'Injected' }
    });
    const before = sim.tick();
    expect(before.pf).toBeLessThan(0.82);
    sim.applyRecovery();
    const after = sim.tick();
    expect(after.pf).toBeGreaterThan(before.pf); // back toward nominal
  });
});
```
